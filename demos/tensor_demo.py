# -*- coding: utf-8 -*-
"""Untitled5.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1i0uZCVkGpx0lztoJ9vCw7zSEVUtH8NTR
"""

import matplotlib.pyplot as plt
import numpy as np
from mpl_toolkits.mplot3d import Axes3D

fig = plt.figure()
ax = fig.add_subplot(111, projection='3d')

# Define the coordinates of the vertices of the cube
x = [0, 1, 1, 0, 0, 1, 1, 0]
y = [0, 0, 1, 1, 0, 0, 1, 1]
z = [0, 0, 0, 0, 1, 1, 1, 1]

# Define the coordinates of the faces of the cube
xx, yy = np.meshgrid([0, 1], [0, 1])
zz = np.zeros((2, 2))
ax.plot_surface(xx, yy, zz)
zz = np.ones((2, 2))
ax.plot_surface(xx, yy, zz)

xx = np.zeros((2, 2))
yy, zz = np.meshgrid([0, 1], [0, 1])
ax.plot_surface(xx, yy, zz)
xx = np.ones((2, 2))
yy, zz = np.meshgrid([0, 1], [0, 1])
ax.plot_surface(xx, yy, zz)

yy = np.zeros((2, 2))
xx, zz = np.meshgrid([0, 1], [0, 1])
ax.plot_surface(xx, yy, zz)
yy = np.ones((2, 2))
xx, zz = np.meshgrid([0, 1], [0, 1])
ax.plot_surface(xx, yy, zz)

# Plot the vertices of the cube
ax.scatter(x, y, z)

ax.set_xlabel('X')
ax.set_ylabel('Y')
ax.set_zlabel('Z')
plt.show()

nstates= 20
i,j= 10,5

tensor_dummy = np.zeros((nstates,nstates,nstates))+0.1

tensor_dummy[:,i,j]=1

from scipy.special import comb  
def bindist(n,k,p=0.5):
    return comb(n,k)*p**k*(1-p)**(n-k)

skw = 0.62
v = np.zeros(nstates)
for k in range(nstates):
    v[k] = bindist(nstates-1,k,skw)

from locale import normalize

cx,cy,cz = list(map(np.ndarray.flatten, np.meshgrid(np.arange(nstates),np.arange(nstates),np.arange(nstates))))

#fig = plt.figure(figsize=(12,24)); ax = fig.add_subplot(211,projection='3d');ax2 = fig.add_subplot(212)
#fig, (ax, ax2) = plt.subplots(2,1, gridspec_kw={'height_ratios': [3, 1]})

fig = plt.figure(fig = plt.figure(figsize=(12,16))
ax = fig.add_subplot(111, projection='3d')
ax.plot(dataset_temp[0],dataset_temp[1],dataset_temp[2],linewidth=.5)
ax.set_xlabel(r'$S_1$')
ax.set_ylabel(r'$S_2$')
ax.set_zlabel(r'$S_3$')
plt.show()
);
gs0 = fig.add_gridspec(2, 1,height_ratios=[3, 1])
ax  = fig.add_subplot(gs0[0],projection='3d')
ax2 = fig.add_subplot(gs0[1])



#scat = ax.scatter3D(cz,cx,cy, c=(1-10**(-10*oc_tensor)).flatten(),alpha=0.9, s=40,cmap='gnuplot')
scat = ax.scatter3D(cz,cx,cy, c=tensor_dummy.flatten(),alpha=0.1, s=2,cmap='magma')
cz,cx,cy = (np.repeat(i,nstates),np.repeat(j,nstates),np.arange(nstates))
scat = ax.scatter3D(cz,cx,cy, c=v,alpha=1, s=40,cmap='magma')

import matplotlib as mpl




cmap = mpl.cm.get_cmap('magma')
norm = mpl.colors.Normalize(vmin=min(v), vmax=max(v))
colors= cmap(norm(v))
ax2.bar(np.arange(nstates),v,width=1, color=colors)
#ax.plot((j,j),(i,0),(nstates-1,nstates-1))
ax.plot((i,i),(j,0),(0,0),color='red')
#ax.plot((j,0),(i,i),(nstates-1,nstates-1))
ax.plot((i,0),(j,j),(0,0),color='red')
n=nstates-1
ax.plot((0,n),(0,0),(0,0),color='black')
ax.plot((0,0),(0,n),(0,0),color='black')
ax.plot((0,0),(0,0),(0,n),color='black')

ax.plot((n,n),(n,n),(n,0),color='black')
ax.plot((n,0),(n,n),(n,n),color='black')
ax.plot((n,n),(n,0),(n,n),color='black')

ax.plot((n,n),(0,n),(0,0),color='black')
ax.plot((n,n),(0,0),(0,n),color='black')
ax.plot((0,n),(0,0),(n,n),color='black')
ax.plot((0,n),(n,n),(0,0),color='black')
ax.plot((0,0),(0,n),(n,n),color='black')
ax.plot((0,0),(n,n),(0,n),color='black')
ax.set_xlabel('i', fontsize=16, fontweight='bold')
ax.set_ylabel('j', fontsize=16, fontweight='bold')
ax.set_zlabel('k', fontsize=16, fontweight='bold')

ax2.set_xlabel('k', fontsize=16, fontweight='bold')
ax2.set_ylabel(r'$P\left\{K=k \mid i=' + str(i) + r',j='+ str(j) +r'\right\}$')
ax2.spines['top'].set_linewidth(0)

#ax.axis('off')
#ax.grid(b=None)
fig.colorbar(scat)
plt.show()


